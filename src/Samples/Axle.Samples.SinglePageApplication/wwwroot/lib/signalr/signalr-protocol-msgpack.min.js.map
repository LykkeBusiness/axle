{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../node_modules/base64-js/index.js","../../node_modules/ieee754/index.js","../../node_modules/buffer/index.js","../../../../../node_modules/@aspnet/signalr/src/Errors.ts","../../../../../node_modules/@aspnet/signalr/src/ILogger.ts","../../../../../node_modules/@aspnet/signalr/src/HttpClient.ts","../../../../../node_modules/@aspnet/signalr/src/TextMessageFormat.ts","../../../../../node_modules/@aspnet/signalr/src/HandshakeProtocol.ts","../../../../../node_modules/@aspnet/signalr/src/IHubProtocol.ts","../../../../../node_modules/@aspnet/signalr/src/Loggers.ts","../../../../../node_modules/@aspnet/signalr/src/Utils.ts","../../../../../node_modules/@aspnet/signalr/src/HubConnection.ts","../../../../../node_modules/@aspnet/signalr/src/ITransport.ts","../../../../../node_modules/@aspnet/signalr/src/AbortController.ts","../../../../../node_modules/@aspnet/signalr/src/LongPollingTransport.ts","../../../../../node_modules/@aspnet/signalr/src/ServerSentEventsTransport.ts","../../../../../node_modules/@aspnet/signalr/src/WebSocketTransport.ts","../../../../../node_modules/@aspnet/signalr/src/HttpConnection.ts","../../../../../node_modules/@aspnet/signalr/src/JsonHubProtocol.ts","../../../../../node_modules/@aspnet/signalr/src/HubConnectionBuilder.ts","../../../../../node_modules/@aspnet/signalr/src/index.ts","../../src/BinaryMessageFormat.ts","../../src/MessagePackHubProtocol.ts","../../src/index.ts","../../src/browser-index.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__rest","e","indexOf","getOwnPropertySymbols","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","apply","__generator","body","_","label","sent","trys","ops","f","y","g","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__exportStar","m","exports","__values","o","__read","ar","error","__spread","concat","__await","__asyncGenerator","asyncIterator","q","a","resume","settle","fulfill","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","k","default","__importDefault","byteLength_1","byteLength","toByteArray_1","toByteArray","fromByteArray_1","fromByteArray","lookup","revLookup","Arr","Uint8Array","code","len","charCodeAt","placeHoldersCount","b64","Error","l","tmp","placeHolders","arr","L","tripletToBase64","num","encodeChunk","uint8","start","end","output","join","extraBytes","parts","maxChunkLength","len2","read","buffer","offset","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","Infinity","Math","pow","write","rt","abs","isNaN","floor","log","LN2","Buffer","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","console","foo","createBuffer","RangeError","buf","arg","encodingOrOffset","allocUnsafe","from","species","configurable","enumerable","writable","poolSize","isArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","allocUnsafeSlow","string","isEncoding","actual","slice","fromArrayLike","array","byteOffset","obj","isBuffer","copy","isArrayBufferView","numberIsNaN","type","isArray","data","toString","_isBuffer","compare","x","min","String","toLowerCase","list","pos","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","equals","inspect","str","max","match","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","includes","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","_arr","base64","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","toHex","bytes","newBuf","subarray","checkOffset","ext","readUIntLE","noAssert","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","ieee754","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","set","INVALID_BASE64_RE","base64clean","trim","replace","units","leadSurrogate","byteArray","hi","lo","src","dst","ArrayBuffer","name","isView","HttpError","_super","tslib_1.__extends","errorMessage","statusCode","_this","trueProto","_newTarget","TimeoutError","AbortError","LogLevel","HttpResponse","statusText","content","HttpClient","get","url","options","send","tslib_1","method","post","delete","DefaultHttpClient","logger","request","abortSignal","aborted","xhr","XMLHttpRequest","open","withCredentials","setRequestHeader","headers","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","response","responseText","onerror","Warning","ontimeout","TextMessageFormat","RecordSeparator","parse","input","messages","split","RecordSeparatorCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","JSON","stringify","parseHandshakeResponse","responseMessage","messageData","remainingData","binaryData","separatorIndex","responseLength","textData","substring","MessageType","NullLogger","logLevel","message","instance","Arg","isRequired","isIn","values","includeContent","detail","formatArrayBuffer","view","pad","sendMessage","transportName","httpClient","accessTokenFactory","logMessageContent","token","_b","_a","Trace","getDataDetail","createLogger","ConsoleLogger","Information","Subject","cancelCallback","observers","item","_i","observer","err","complete","subscribe","SubjectSubscription","subject","dispose","index","splice","catch","minimumLogLevel","Critical","warn","info","DEFAULT_TIMEOUT_IN_MS","DEFAULT_PING_INTERVAL_IN_MS","HubConnectionState","HubConnection","connection","protocol","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","handshakeProtocol","onreceive","processIncomingData","onclose","connectionClosed","callbacks","methods","closedCallbacks","id","receivedHandshakeResponse","connectionState","Disconnected","cachedPingMessage","writeMessage","Ping","version","Debug","transferFormat","cleanupTimeout","resetTimeoutPeriod","resetKeepAliveInterval","Connected","stop","cleanupPingTimer","stream","methodName","args","invocationDescriptor","createStreamInvocation","cancelInvocation","createCancelInvocation","invocationId","cancelMessage","invocationEvent","Completion","createInvocation","invoke","on","newMethod","off","handlers","removeIdx","callback","processHandshakeResponse","parseMessages","messages_1","Invocation","invokeClientMethod","StreamItem","Close","pingServerHandle","setTimeout","features","inherentKeepAlive","timeoutHandle","serverTimeout","invocationMessage","clearTimeout","nonblocking","StreamInvocation","CancelInvocation","HttpTransportType","TransferFormat","AbortController","isAborted","LongPollingTransport","pollAbort","running","connect","Binary","pollOptions","signal","getAccessToken","updateHeaderToken","pollUrl","Date","now","closeError","receiving","poll","e_1","pollAborted","raiseOnClose","deleteOptions","logMessage","ServerSentEventsTransport","eventSourceConstructor","encodeURIComponent","opened","Text","eventSource","onmessage","close","onopen","WebSocketTransport","webSocketConstructor","webSocket","binaryType","event","ErrorEvent","wasClean","reason","readyState","WebSocket","OPEN","MAX_REDIRECTS","HttpConnection","baseUrl","resolveUrl","EventSource","startPromise","startInternal","transport","stopError","skipNegotiation","WebSockets","constructTransport","negotiateResponse","redirects","this_1","getNegotiationResponse","accessToken","accessToken_1","createTransport","stopConnection","changeState","e_2","negotiateUrl","resolveNegotiateUrl","e_3","createConnectUrl","connectionId","requestedTransport","requestedTransferFormat","connectUrl","isITransport","transports","availableTransports","transports_1","endpoint","resolveTransport","ex_1","ServerSentEvents","LongPolling","transferFormats","map","transportMatches","to","window","document","aTag","createElement","href","actualTransport","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","hubMessages","parsedMessage","isInvocationMessage","isStreamItemMessage","isCompletionMessage","assertNotEmptyString","HubConnectionBuilder","configureLogging","logging","isLogger","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","build","VERSION","BinaryMessageFormat","lenBuffer","sizePart","uint8Array","maxLengthPrefixSize","numBitsToShift","numBytes","byteRead","MessagePackHubProtocol","signalr_1","BinaryMessageFormat_1","parseMessage","writeInvocation","writeStreamInvocation","msgpack","msgpack5","properties","decode","buffer_1","messageType","createInvocationMessage","readHeaders","createStreamItemMessage","createCompletionMessage","createPingMessage","createCloseMessage","errorResult","voidResult","nonVoidResult","resultKind","completionMessage","payload","encode","streamInvocationMessage","MessagePackHubProtocol_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\n/** Default implementation of {@link HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    /** Creates a new instance of the {@link DefaultHttpClient}, using the provided {@link ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            // Check that abort was not signaled before calling send\r\n            if (request.abortSignal && request.abortSignal.aborted) {\r\n                reject(new AbortError());\r\n                return;\r\n            }\r\n\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            if (!request.method) {\r\n                reject(new Error(\"No method defined.\"));\r\n                return;\r\n            }\r\n            if (!request.url) {\r\n                reject(new Error(\"No url defined.\"));\r\n                return;\r\n            }\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (data instanceof ArrayBuffer) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        responseMessage = JSON.parse(messages[0]);\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link StreamInvocationMessage} and {@link CompletionMessage}. It may\r\n     * be 'undefined' for an {@link InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link error} or {@link result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link error} or {@link result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link transferFormat} is 'Text', the {@link input} parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string, or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    public log(logLevel: LogLevel, message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\n\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (data instanceof ArrayBuffer) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'.`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n    public cancelCallback: () => Promise<void>;\r\n\r\n    constructor(cancelCallback: () => Promise<void>) {\r\n        this.observers = [];\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    console.error(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    console.warn(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    console.info(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    console.log(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected,\r\n    /** The hub connection is connected. */\r\n    Connected,\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private timeoutHandle?: NodeJS.Timer;\r\n    private pingServerHandle?: NodeJS.Timer;\r\n    private receivedHandshakeResponse: boolean;\r\n    private connectionState: HubConnectionState;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.resetTimeoutPeriod();\r\n        this.resetKeepAliveInterval();\r\n\r\n        this.connectionState = HubConnectionState.Connected;\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return this.sendMessage(cancelMessage);\r\n        });\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.sendMessage(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.sendMessage(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.sendMessage(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n            this.connection.stop(new Error(message));\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(() => this.sendMessage(this.cachedPingMessage), this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly pollAbort: AbortController;\r\n\r\n    private url?: string;\r\n    private pollXhr?: XMLHttpRequest;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const eventSource = new this.eventSourceConstructor(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    const error = new Error(e.message || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const webSocket = new this.webSocketConstructor(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                const error = (event instanceof ErrorEvent) ? event.error : null;\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n                if (this.onclose) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient, HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { EventSourceConstructor, WebSocketConstructor } from \"./Polyfills\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n}\r\n\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startPromise?: Promise<void>;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n\r\n    public readonly features: any = {};\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        if (typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        if (typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.transport!.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        if (this.transport) {\r\n            this.stopError = error;\r\n            await this.transport.stop();\r\n            this.transport = undefined;\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.transport!.connect(url, transferFormat);\r\n                } else {\r\n                    throw Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnected) {\r\n                        return;\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            this.transport!.onreceive = this.onreceive;\r\n            this.transport!.onclose = (e) => this.stopConnection(e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        let headers;\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                throw Error(`Unexpected status code returned from negotiate ${response.statusCode}`);\r\n            }\r\n\r\n            return JSON.parse(response.content as string) as INegotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionId: string | null | undefined) {\r\n        if (!connectionId) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionId}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(connectUrl, requestedTransferFormat);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (!negotiateResponse.connectionId) {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n                }\r\n                try {\r\n                    await this.transport!.connect(connectUrl, requestedTransferFormat);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${HttpTransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = undefined;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): HttpTransportType | null {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private async stopConnection(error?: Error): Promise<void> {\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n/** A builder for configuring {@link HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** Configures console logging for the {@link HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol());\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport { AbortSignal } from \"./AbortController\";\r\nexport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nexport { DefaultHttpClient, HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nexport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nexport { HubConnection, HubConnectionState } from \"./HubConnection\";\r\nexport { HubConnectionBuilder } from \"./HubConnectionBuilder\";\r\nexport { MessageType, MessageHeaders, HubMessage, HubMessageBase, HubInvocationMessage, InvocationMessage, StreamInvocationMessage, StreamItemMessage, CompletionMessage, PingMessage, CloseMessage, CancelInvocationMessage, IHubProtocol } from \"./IHubProtocol\";\r\nexport { ILogger, LogLevel } from \"./ILogger\";\r\nexport { HttpTransportType, TransferFormat, ITransport } from \"./ITransport\";\r\nexport { IStreamSubscriber, IStreamResult, ISubscription } from \"./Stream\";\r\nexport { NullLogger } from \"./Loggers\";\r\nexport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\n","// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// Not exported from index.\nexport class BinaryMessageFormat {\n\n    // The length prefix of binary messages is encoded as VarInt. Read the comment in\n    // the BinaryMessageParser.TryParseMessage for details.\n\n    public static write(output: Uint8Array): ArrayBuffer {\n        // msgpack5 uses returns Buffer instead of Uint8Array on IE10 and some other browser\n        //  in which case .byteLength does will be undefined\n        let size = output.byteLength || output.length;\n        const lenBuffer = [];\n        do {\n            let sizePart = size & 0x7f;\n            size = size >> 7;\n            if (size > 0) {\n                sizePart |= 0x80;\n            }\n            lenBuffer.push(sizePart);\n        }\n        while (size > 0);\n\n        // msgpack5 uses returns Buffer instead of Uint8Array on IE10 and some other browser\n        //  in which case .byteLength does will be undefined\n        size = output.byteLength || output.length;\n\n        const buffer = new Uint8Array(lenBuffer.length + size);\n        buffer.set(lenBuffer, 0);\n        buffer.set(output, lenBuffer.length);\n        return buffer.buffer;\n    }\n\n    public static parse(input: ArrayBuffer): Uint8Array[] {\n        const result: Uint8Array[] = [];\n        const uint8Array = new Uint8Array(input);\n        const maxLengthPrefixSize = 5;\n        const numBitsToShift = [0, 7, 14, 21, 28 ];\n\n        for (let offset = 0; offset < input.byteLength;) {\n            let numBytes = 0;\n            let size = 0;\n            let byteRead;\n            do {\n                byteRead = uint8Array[offset + numBytes];\n                size = size | ((byteRead & 0x7f) << (numBitsToShift[numBytes]));\n                numBytes++;\n            }\n            while (numBytes < Math.min(maxLengthPrefixSize, input.byteLength - offset) && (byteRead & 0x80) !== 0);\n\n            if ((byteRead & 0x80) !== 0 && numBytes < maxLengthPrefixSize) {\n                throw new Error(\"Cannot read message size.\");\n            }\n\n            if (numBytes === maxLengthPrefixSize && byteRead > 7) {\n                throw new Error(\"Messages bigger than 2GB are not supported.\");\n            }\n\n            if (uint8Array.byteLength >= (offset + numBytes + size)) {\n                // IE does not support .slice() so use subarray\n                result.push(uint8Array.slice\n                    ? uint8Array.slice(offset + numBytes, offset + numBytes + size)\n                    : uint8Array.subarray(offset + numBytes, offset + numBytes + size));\n            } else {\n                throw new Error(\"Incomplete message.\");\n            }\n\n            offset = offset + numBytes + size;\n        }\n\n        return result;\n    }\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { Buffer } from \"buffer\";\nimport * as msgpack5 from \"msgpack5\";\n\nimport { CompletionMessage, HubMessage, IHubProtocol, ILogger, InvocationMessage, LogLevel, MessageHeaders, MessageType, NullLogger, StreamInvocationMessage, StreamItemMessage, TransferFormat } from \"@aspnet/signalr\";\n\nimport { BinaryMessageFormat } from \"./BinaryMessageFormat\";\n\n// TypeDoc's @inheritDoc and @link don't work across modules :(\n\n/** Implements the MessagePack Hub Protocol */\nexport class MessagePackHubProtocol implements IHubProtocol {\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\n    public readonly name: string = \"messagepack\";\n    /** The version of the protocol. */\n    public readonly version: number = 1;\n    /** The TransferFormat of the protocol. */\n    public readonly transferFormat: TransferFormat = TransferFormat.Binary;\n\n    /** Creates an array of HubMessage objects from the specified serialized representation.\n     *\n     * @param {ArrayBuffer} input An ArrayBuffer containing the serialized representation.\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\n     */\n    public parseMessages(input: ArrayBuffer, logger: ILogger): HubMessage[] {\n        // The interface does allow \"string\" to be passed in, but this implementation does not. So let's throw a useful error.\n        if (!(input instanceof ArrayBuffer)) {\n            throw new Error(\"Invalid input for MessagePack hub protocol. Expected an ArrayBuffer.\");\n        }\n\n        if (logger === null) {\n            logger = NullLogger.instance;\n        }\n        return BinaryMessageFormat.parse(input).map((m) => this.parseMessage(m, logger));\n    }\n\n    /** Writes the specified HubMessage to an ArrayBuffer and returns it.\n     *\n     * @param {HubMessage} message The message to write.\n     * @returns {ArrayBuffer} An ArrayBuffer containing the serialized representation of the message.\n     */\n    public writeMessage(message: HubMessage): ArrayBuffer {\n        switch (message.type) {\n            case MessageType.Invocation:\n                return this.writeInvocation(message as InvocationMessage);\n            case MessageType.StreamInvocation:\n                return this.writeStreamInvocation(message as StreamInvocationMessage);\n            case MessageType.StreamItem:\n            case MessageType.Completion:\n                throw new Error(`Writing messages of type '${message.type}' is not supported.`);\n            default:\n                throw new Error(\"Invalid message type.\");\n        }\n    }\n\n    private parseMessage(input: Uint8Array, logger: ILogger): HubMessage {\n        if (input.length === 0) {\n            throw new Error(\"Invalid payload.\");\n        }\n\n        const msgpack = msgpack5();\n        const properties = msgpack.decode(new Buffer(input));\n        if (properties.length === 0 || !(properties instanceof Array)) {\n            throw new Error(\"Invalid payload.\");\n        }\n\n        const messageType = properties[0] as MessageType;\n\n        switch (messageType) {\n            case MessageType.Invocation:\n                return this.createInvocationMessage(this.readHeaders(properties), properties);\n            case MessageType.StreamItem:\n                return this.createStreamItemMessage(this.readHeaders(properties), properties);\n            case MessageType.Completion:\n                return this.createCompletionMessage(this.readHeaders(properties), properties);\n            case MessageType.Ping:\n                return this.createPingMessage(properties);\n            case MessageType.Close:\n                return this.createCloseMessage(properties);\n            default:\n                // Future protocol changes can add message types, old clients can ignore them\n                logger.log(LogLevel.Information, \"Unknown message type '\" + messageType + \"' ignored.\");\n                return null;\n        }\n    }\n\n    private createCloseMessage(properties: any[]): HubMessage {\n        // check minimum length to allow protocol to add items to the end of objects in future releases\n        if (properties.length < 2) {\n            throw new Error(\"Invalid payload for Close message.\");\n        }\n\n        return {\n            // Close messages have no headers.\n            error: properties[1],\n            type: MessageType.Close,\n        } as HubMessage;\n    }\n\n    private createPingMessage(properties: any[]): HubMessage {\n        // check minimum length to allow protocol to add items to the end of objects in future releases\n        if (properties.length < 1) {\n            throw new Error(\"Invalid payload for Ping message.\");\n        }\n\n        return {\n            // Ping messages have no headers.\n            type: MessageType.Ping,\n        } as HubMessage;\n    }\n\n    private createInvocationMessage(headers: MessageHeaders, properties: any[]): InvocationMessage {\n        // check minimum length to allow protocol to add items to the end of objects in future releases\n        if (properties.length < 5) {\n            throw new Error(\"Invalid payload for Invocation message.\");\n        }\n\n        const invocationId = properties[2] as string;\n        if (invocationId) {\n            return {\n                arguments: properties[4],\n                headers,\n                invocationId,\n                target: properties[3] as string,\n                type: MessageType.Invocation,\n            };\n        } else {\n            return {\n                arguments: properties[4],\n                headers,\n                target: properties[3],\n                type: MessageType.Invocation,\n            };\n        }\n\n    }\n\n    private createStreamItemMessage(headers: MessageHeaders, properties: any[]): StreamItemMessage {\n        // check minimum length to allow protocol to add items to the end of objects in future releases\n        if (properties.length < 4) {\n            throw new Error(\"Invalid payload for StreamItem message.\");\n        }\n\n        return {\n            headers,\n            invocationId: properties[2],\n            item: properties[3],\n            type: MessageType.StreamItem,\n        } as StreamItemMessage;\n    }\n\n    private createCompletionMessage(headers: MessageHeaders, properties: any[]): CompletionMessage {\n        // check minimum length to allow protocol to add items to the end of objects in future releases\n        if (properties.length < 4) {\n            throw new Error(\"Invalid payload for Completion message.\");\n        }\n\n        const errorResult = 1;\n        const voidResult = 2;\n        const nonVoidResult = 3;\n\n        const resultKind = properties[3];\n\n        if (resultKind !== voidResult && properties.length < 5) {\n            throw new Error(\"Invalid payload for Completion message.\");\n        }\n\n        const completionMessage = {\n            error: null as string,\n            headers,\n            invocationId: properties[2],\n            result: null as any,\n            type: MessageType.Completion,\n        };\n\n        switch (resultKind) {\n            case errorResult:\n                completionMessage.error = properties[4];\n                break;\n            case nonVoidResult:\n                completionMessage.result = properties[4];\n                break;\n        }\n\n        return completionMessage as CompletionMessage;\n    }\n\n    private writeInvocation(invocationMessage: InvocationMessage): ArrayBuffer {\n        const msgpack = msgpack5();\n        const payload = msgpack.encode([MessageType.Invocation, invocationMessage.headers || {}, invocationMessage.invocationId || null,\n        invocationMessage.target, invocationMessage.arguments]);\n\n        return BinaryMessageFormat.write(payload.slice());\n    }\n\n    private writeStreamInvocation(streamInvocationMessage: StreamInvocationMessage): ArrayBuffer {\n        const msgpack = msgpack5();\n        const payload = msgpack.encode([MessageType.StreamInvocation, streamInvocationMessage.headers || {}, streamInvocationMessage.invocationId,\n        streamInvocationMessage.target, streamInvocationMessage.arguments]);\n\n        return BinaryMessageFormat.write(payload.slice());\n    }\n\n    private readHeaders(properties: any): MessageHeaders {\n        const headers: MessageHeaders = properties[1] as MessageHeaders;\n        if (typeof headers !== \"object\") {\n            throw new Error(\"Invalid headers.\");\n        }\n        return headers;\n    }\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// Version token that will be replaced by the prepack command\n/** The version of the SignalR Message Pack protocol library. */\nexport const VERSION = \"0.0.0-DEV_BUILD\";\n\nexport { MessagePackHubProtocol } from \"./MessagePackHubProtocol\";\n","// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\n\nexport * from \"./index\";\n"]}